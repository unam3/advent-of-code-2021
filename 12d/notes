Part 1. How many paths through this cave system are there that visit small caves at most once?

How to represent input data as possible paths?
    + Map String [String]

+ write down rules for pasing
    · if one part is "start" then we only should add "start" to "x" relation
    · if one part is "end" then we only should add "x" to "end" relation
    · otherwise add mutual relations
+ implement path making function: constructPaths
    + been able to distinguish capitalized strings (big caves) from relular one (small caves)
    + remove recursion and debug manually
        + why on the first iteration we're having the empty connectedParts? wrong logic in filter function
        + chain constructPaths calls
    + exclude paths which does not reach "end": start-b-d
        x if all-lower cave connects to only all-lower cave then exclude it from Relations
            - filter out all lower keys from Relations which have only one all lower connection
        + exclude from the output of constructPaths(Wrapper)
    x beware of cycles?
- given current implementation how we can wisit each small caves twice and collect these paths?
    x pass small cave name into constructPaths (Maybe String) to visit it twice?
        - analyze parsed input
        - collect small cave names
        - fold over them with modified constructPaths
    - modify input so we could emulate reaching one small cave twice
        + get all small caves from (parsed) input
        + modify parsed input so we could emulate visiting small cave twice:
            + for b from testInput we could create b1 with same relations as b:
                + duplicate relations with copiyng list of b-to-relations
                + add b1 to relations where b can make connection
        + fuse b and b1 from constructed paths
             + create proper test data
             - can we do without nub?
        + use union to filter out results of consequent constructPaths calls from foldl accumulator
        - dump current path on exit code
